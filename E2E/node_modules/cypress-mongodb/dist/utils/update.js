"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMany = exports.updateOne = void 0;
var mongodb_1 = require("mongodb");
var bson_1 = require("bson");
function updateOne(args) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            args.filter = (0, bson_1.deserialize)(Buffer.from(args.filter));
            args.pipeline = (0, bson_1.deserialize)(Buffer.from(args.pipeline));
            return [2, mongodb_1.MongoClient.connect(args.uri).then(function (client) { return __awaiter(_this, void 0, void 0, function () {
                    var database, collection, result, err_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 5]);
                                database = client.db(args.options.database);
                                collection = database.collection(args.options.collection);
                                return [4, collection.updateOne(args.filter, args.pipeline)];
                            case 1:
                                result = _a.sent();
                                return [4, client.close()];
                            case 2:
                                _a.sent();
                                if (result !== null)
                                    return [2, (0, bson_1.serialize)(result)];
                                return [2, null];
                            case 3:
                                err_1 = _a.sent();
                                return [4, client.close()];
                            case 4:
                                _a.sent();
                                throw err_1;
                            case 5: return [2];
                        }
                    });
                }); })];
        });
    });
}
exports.updateOne = updateOne;
function updateMany(args) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            args.filter = (0, bson_1.deserialize)(Buffer.from(args.filter));
            args.pipeline = (0, bson_1.deserialize)(Buffer.from(args.pipeline));
            return [2, mongodb_1.MongoClient.connect(args.uri).then(function (client) { return __awaiter(_this, void 0, void 0, function () {
                    var err_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 1, , 3]);
                                return [2, client
                                        .db(args.options.database)
                                        .collection(args.options.collection)
                                        .updateMany(args.filter, args.pipeline)
                                        .then(function (result) {
                                        client.close();
                                        return (0, bson_1.serialize)(result);
                                    })];
                            case 1:
                                err_2 = _a.sent();
                                return [4, client.close()];
                            case 2:
                                _a.sent();
                                throw err_2;
                            case 3: return [2];
                        }
                    });
                }); })];
        });
    });
}
exports.updateMany = updateMany;
